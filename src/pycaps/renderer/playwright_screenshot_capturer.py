from PIL import Image
import io
from playwright.sync_api import Locator
import numpy as np

class PlaywrightScreenshotCapturer:
    @staticmethod
    def capture(locator: Locator, device_scale_factor: int) -> Image.Image:
        png_bytes = locator.screenshot(omit_background=True, type="png", animations="disabled", scale="device")
        image = Image.open(io.BytesIO(png_bytes)).convert("RGBA")
        image = PlaywrightScreenshotCapturer._trim_extra_fully_transparent_pixels(image, device_scale_factor)
        return image

    @staticmethod
    def _trim_extra_fully_transparent_pixels(image: Image.Image, device_scale_factor: int) -> Image.Image:
        '''
        Trims extra transparent rows or columns from the image.
        This is a workaround to avoid a issue of transparent pixels on the edges generated by playwright.
        '''
        data = np.array(image)
        alpha = data[:, :, 3] 
        h, w = alpha.shape
        threshold = 10

        top = 0
        while top < device_scale_factor and np.percentile(alpha[top, :], 98) < threshold: top += 1

        bottom = h
        while (h-bottom) < device_scale_factor and np.percentile(alpha[bottom-1, :], 98) < threshold: bottom -= 1

        left = 0
        while left < device_scale_factor and np.percentile(alpha[:, left], 98) < threshold: left += 1

        right = w
        while (w-right) < device_scale_factor and np.percentile(alpha[:, right-1], 98) < threshold: right -= 1

        if top == 0 and bottom == h and left == 0 and right == w:
            return image

        return image.crop((left, top, right, bottom))
