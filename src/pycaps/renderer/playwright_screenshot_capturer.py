from PIL import Image
import io
from playwright.sync_api import Locator
import numpy as np

class PlaywrightScreenshotCapturer:
    @staticmethod
    def capture(locator: Locator) -> Image.Image:
        png_bytes = locator.screenshot(omit_background=True, type="png")
        image = Image.open(io.BytesIO(png_bytes)).convert("RGBA")
        image = PlaywrightScreenshotCapturer._trim_extra_fully_transparent_pixels(image)
        return image

    @staticmethod
    def _trim_extra_fully_transparent_pixels(image: Image.Image) -> Image.Image:
        '''
        Trims extra transparent rows or columns from the image.
        This is a workaround to avoid a issue of transparent pixels on the edges generated by playwright.
        '''
        data = np.array(image)
        alpha = data[:, :, 3] 
        h, w = alpha.shape
        threshold = 10

        top = 1 if np.percentile(alpha[0, :], 98) < threshold else 0
        bottom = h - 1 if np.percentile(alpha[h - 1, :], 98) < threshold else h
        left = 1 if np.percentile(alpha[:, 0], 98) < threshold else 0
        right = w - 1 if np.percentile(alpha[:, w - 1], 98) < threshold else w

        if top == 0 and bottom == h and left == 0 and right == w:
            return image

        return image.crop((left, top, right, bottom))
